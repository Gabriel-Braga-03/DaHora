unit Model.FileManager;

interface
    uses System.SysUtils, VCL.Dialogs;

    type
        TArrayStrings = array of String;
        TFileManager = class
        private
            // Atributos
            arq: TextFile;
            arqPath: String;
            dirPath: String;

        public
            // Método Construtor
            constructor Create(path: String; isDir: Boolean);

            // Métodos Set
            procedure setArqPath(path: String);

            // Métodos Especiais
            procedure createArq();
            procedure deleteArq();
            function existArq(): Boolean;
            procedure createDir();
            procedure deleteDir();
            function existDir(): Boolean;

            // Métodos de Escrita
            procedure write(line: String); overload;
            procedure write(Text: array of String); overload;

            // Métodos de Leitura
            function read(index: Cardinal): String; overload;
            function read(): String; overload;
            function find(ext: String): TArrayStrings;
        end;
implementation
// TFileManager (Implementações)
    // Método Construtor
    constructor TFileManager.Create(path: String; isDir: Boolean);
    begin
        if not isDir then
        begin
            Assign(Self.arq, path);
            Self.arqPath := path;
        end
        else
        begin
            Self.dirPath := path;
        end;
    end;

    // Métodos Set
    procedure TFileManager.setArqPath(path: String);
    begin
        Assign(arq, path);
        Self.arqPath := path;
    end;

    // Métodos Especiais
    procedure TFileManager.createArq();
    begin
        // Criando
        Rewrite(Self.arq);
        CloseFile(Self.arq);
    end;
    procedure TFileManager.deleteArq();
    begin
        System.SysUtils.DeleteFile(Self.arqPath);
    end;
    function TFileManager.existArq(): Boolean;
    begin
        exit(FileExists(arqPath))
    end;
    procedure TFileManager.createDir();
    begin
        System.SysUtils.CreateDir(Self.dirPath);
    end;
    procedure TFileManager.deleteDir();
    begin
        System.SysUtils.RemoveDir(Self.dirPath);
    end;
    function TFileManager.existDir(): Boolean;
    begin
        exit(DirectoryExists(arqPath))
    end;

    // Métodos de Escrita
    procedure TFileManager.write(line: String);
    begin
        // Abrindo arquivo sem apagar
        Append(Self.arq);

        // Escrevendo
        Writeln(arq, line);
        CloseFile(Self.arq);
    end;
    procedure TFileManager.write(text: array of String);
    var
        line: String;
    begin
        // Abrindo arquivo sem apagar
        Append(Self.arq);

        // Escrevendo linha por linha
        for line in text do
        begin
            Writeln(arq, line);
        end;
        CloseFile(Self.arq);
    end;

    // Métodos de Leitura
    function TFileManager.read(index: Cardinal): String;
    var
        count: Cardinal;
        line: String;
    begin
        // Abrindo arquivo para leitura
        Reset(arq);

        // Lendo
        for count := 0 to index do
        begin
            Readln(arq, line);
        end;
        CloseFile(Self.arq);
        Result := line;
    end;
    function TFileManager.read(): String;
    var
        count: Cardinal;
        line: String;
    begin
        // Abrindo arquivo para leitura
        Reset(arq);
        Result := '';

        // Lendo
        while not Eof(Self.arq) do
        begin
            Readln(arq, line);
            Result := Result + line;
        end;
        CloseFile(Self.arq);
    end;
    function TFileManager.find(ext: String): TArrayStrings;
    var
        sr: TSearchRec;
        list: TArrayStrings;
    begin
        // Checando se há arquivos
        if FindFirst(Self.dirPath +'/'+ ext, System.SysUtils.faAnyFile, sr) = 0 then
        begin
            repeat
                setLength(list, Length(list) + 1);
                list[Length(list) - 1] := sr.Name;
            until FindNext(sr) <> 0;
        end;
        Result := Copy(list);
    end;

end.
